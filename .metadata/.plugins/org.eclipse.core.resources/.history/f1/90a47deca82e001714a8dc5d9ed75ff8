#include "SFApp.h"

SFApp::SFApp(std::shared_ptr<SFWindow> window) : fire(0), is_running(true), sf_window(window) {
  int canvas_w, canvas_h;
  SDL_GetRendererOutputSize(sf_window->getRenderer(), &canvas_w, &canvas_h);


  background = make_shared<SFAsset>(SFASSET_BACKGROUND, sf_window);
  auto background_pos = Point2(canvas_w/2, canvas_h/2);
  background -> SetPosition(background_pos);

  app_box = make_shared<SFBoundingBox>(Vector2(canvas_w, canvas_h), canvas_w, canvas_h);
  player  = make_shared<SFAsset>(SFASSET_PLAYER, sf_window);

  blockOne = make_shared<SFAsset>(SFASSET_BLOCK, sf_window);
  auto blockOne_pos = Point2((canvas_w/2) - 35, (canvas_h- 20));
  blockOne -> SetPosition(blockOne_pos);

  blockTwo = make_shared<SFAsset>(SFASSET_BLOCK, sf_window);
  auto blockTwo_pos = Point2((canvas_w/2) + 35, (canvas_h- 20));
  blockTwo -> SetPosition(blockTwo_pos);

  auto player_pos = Point2(canvas_w/2, 22);
  player->SetPosition(player_pos);

  const int number_of_aliens = 7;
  for(int i=0; i<number_of_aliens; i++) {
    // place an alien at width/number_of_aliens * i
    auto alien = make_shared<SFAsset>(SFASSET_ALIEN, sf_window);
    auto Alienpos   = Point2((290 + (50 * i)), (50.0f * i)+200);
    alien->SetPosition(Alienpos);
    aliens.push_back(alien);
  }
  for(int i=0; i<number_of_aliens; i++) {
    // place an alien at width/number_of_aliens * i
    auto alien = make_shared<SFAsset>(SFASSET_ALIEN, sf_window);
    auto Alienpos   = Point2((340 - (50 * i)), (50.0f * i)+200);
    alien->SetPosition(Alienpos);
    aliens.push_back(alien);
  }
  for(int i=0; i<number_of_aliens; i++) {
    // place an alien at width/number_of_aliens * i
    auto alien = make_shared<SFAsset>(SFASSET_ALIEN, sf_window);
    auto Alienpos   = Point2((290 + (50 * i)), (50.0f * i)+400);
    alien->SetPosition(Alienpos);
    aliens.push_back(alien);
  }
  for(int i=0; i<number_of_aliens; i++) {
    // place an alien at width/number_of_aliens * i
    auto alien = make_shared<SFAsset>(SFASSET_ALIEN, sf_window);
    auto Alienpos   = Point2((340 - (50 * i)), (50.0f * i)+400);
    alien->SetPosition(Alienpos);
    aliens.push_back(alien);
  }

  FriendlySpaceship = make_shared<SFAsset>(SFASSET_FRIENDLYSPACESHIP, sf_window);
  auto FSS_pos  = Point2((canvas_w/2), (canvas_h- 20));
  FriendlySpaceship->SetPosition(FSS_pos);
}

SFApp::~SFApp() {
}

/**
 * Handle all events that come from SDL.
 * These are timer or keyboard events.
 */
void SFApp::OnEvent(SFEvent& event) {
  SFEVENT the_event = event.GetCode();

  switch (the_event) {
  case SFEVENT_QUIT:
    is_running = false;
    break;
  case SFEVENT_UPDATE:
    OnUpdateWorld();
    OnRender();
    break;
  case SFEVENT_PLAYER_LEFT:
    player->GoWest();
    break;
  case SFEVENT_PLAYER_RIGHT:
    player->GoEast();
    break;
  case SFEVENT_PLAYER_DOWN:
	  player->GoSouth();
	  break;
  case SFEVENT_PLAYER_UP:
	  player->GoNorth();
	  break;
  case SFEVENT_FIRE:
    fire ++;
    FireProjectile();
    break;
  }
}

void SFApp::OnExecute() {
  // Execute the app
  SDL_Event event;
  while (SDL_WaitEvent(&event) && is_running) {
    // wrap an SDL_Event with our SFEvent
    SFEvent sfevent((const SDL_Event) event);
    // handle our SFEvent
    OnEvent(sfevent);
  }
}

void SFApp::OnUpdateWorld() {
  // Update projectile positions depending on sprite direction
  for(auto projectile: projectiles) {
	  //if(projectile ->GetPosition() == FriendlySpaceShip->GetPosition()){

	 // }
		  projectile->GoNorth();
  }


    if(FriendlySpaceship->CollidesWith(player)){
    	cout << "You've Won!";
    }


  // Update enemy positions
  for(auto alien : aliens) {
		  alien -> AlienGoSouth();
  }

  // Detect collisions
  for(auto projectile : projectiles) {
    for(auto alien : aliens) {
      if(projectile -> CollidesWith(alien)) {
    	  projectile -> HandleCollision();
    	  alien -> HandleCollision();
      }
      if(player -> CollidesWith(alien)){
    	  player -> HandleCollision();
    	  alien -> HandleCollision();
      }
    }
  }

  // remove dead aliens (the long way)
  list<shared_ptr<SFAsset>> tmp;
  for(auto a : aliens) {
    if(a->IsAlive()) {
      tmp.push_back(a);
    }
  }
  aliens.clear();
  aliens = list<shared_ptr<SFAsset>>(tmp);

  list<shared_ptr<SFAsset>> tmp2;
  for(auto p : projectiles) {
    if(p->IsAlive()) {
    	tmp2.push_back(p);
    }
  }
  projectiles.clear();
  projectiles = list<shared_ptr<SFAsset>>(tmp2);
}

void SFApp::OnRender() {
  SDL_RenderClear(sf_window->getRenderer());
  background ->OnRender();

  blockOne ->OnRender();
  blockTwo ->OnRender();
  player->OnRender();
  FriendlySpaceship->OnRender();

  for(auto p: projectiles) {
    if(p->IsAlive()) {p->OnRender();}
  }

  for(auto a: aliens) {
    if(a->IsAlive()) {a->OnRender();}
  }


  // Switch the off-screen buffer to be on-screen
  SDL_RenderPresent(sf_window->getRenderer());
}

void SFApp::FireProjectile() {
  auto pb = make_shared<SFAsset>(SFASSET_PROJECTILE, sf_window);
  auto v  = player->GetPosition();
  pb->SetPosition(v);
  projectiles.push_back(pb);
}
